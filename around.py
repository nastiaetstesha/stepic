from typing import Iterable


def around(iterable: Iterable):
    """Функция должна возвращать генератор, порождающий \
    последовательность кортежей, каждый из которых содержит \
    очередной элемент итерируемого объекта iterable, а также \
    предыдущий и следующий за ним элементы"""

    # Создаем итератор из итерируемого объекта
    iterator = iter(iterable)

    # Самое первое значение всегда None
    prev_val = None

    # Получаем втрое значение. Если итератор будет пуст, то вернется None
    middle_val = next(iterator, None)

    """Запускаем цикл с условием, что среднее значение не будет None.
    None оно может стать внутри цикла, либо еще на старте, тогда цикл не запустится"""
    while middle_val is not None:
        # Получаем следующее значение
        next_val = next(iterator, None)

        # Возвращаем результат
        yield (prev_val, middle_val, next_val)

        # Сдвигаем все значения (сюда мы приходим при следующем обращении к итератору)
        prev_val, middle_val = middle_val, next_val
